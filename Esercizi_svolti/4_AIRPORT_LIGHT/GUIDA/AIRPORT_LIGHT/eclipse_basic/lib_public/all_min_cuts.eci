:- module(all_min_cuts).
:- export all_min_cuts / 8.
:- export all_min_cuts / 9.
:- export all_min_cuts_list / 5.
:- comment(categories, ["Algorithms"]).
:- comment(summary, "Curet et al, algorithm for generating all minimum-cost cuts").
:- comment(desc, "Algorithm for generating all minimum-cost cuts between source and sink. From Norman D. Curet, Jason DeVinney, Matthew E. Gaston. An efficient network flow code for finding all minimum cost s-t cutsets. Computers & Operations Research 29 (2002) 205-219. ").
:- comment(author, "CrossCore Optimization Ltd").
:- comment(copyright, "2007, CrossCore Optimization Ltd").
:- comment(status, prototype).
:- comment(date, "2006-2007").
:- comment(all_min_cuts / 8, [summary : "Curet et al, algorithm for generating all minimum-cost cuts", amode : all_min_cuts(+, +, +, +, -, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow", "MaxFlowEdges" : "list denoting edges with non-zero flow (form: Flow-Edge)", "MinCuts" : "list of all minimum cost cutsets (each cutset is represented by a list of nodes belonging to the source-side of the cut)", "MinCutEdges" : "list of all minimum cost cutsets (each cutset is represented by a list of edges that separate the source-side and the sink-side of the cut)"], desc : html("This predicate provides all minimal cost cutsets for a max flow problem in a graph between a source and a sink node. It returns the maximal flow value, edges with non-zero flow in the optimal solution, and a list of all minimum cost cutsets corresponding to that flow value. The results are given both as node lists (nodes on the source side of the cut), and as edge lists (edges belonging to the cut), to simplify use of the predicate in situations where either of the output formats is preferred."), see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(all_min_cuts / 9, [summary : "Curet et al, algorithm for generating all minimum-cost cuts, with limit for max number of allowed cuts", amode : all_min_cuts(+, +, +, +, +, -, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "Limit" : "max number of min cuts to output (integer), if 0 then output all possible mincuts", "MaxFlowValue" : "value of the maximum flow", "MaxFlowEdges" : "list denoting edges with non-zero flow (form: Flow-Edge)", "MinCuts" : "list of max Limit minimum cost cutsets (each cutset is represented by a list of nodes belonging to the source-side of the cut)", "MinCutEdges" : "list of all minimum cost cutsets (each cutset is represented by a list of edges that separate the source-side and the sink-side of the cut)"], desc : "This predicate uses the saem interface, and provides the same information as all_min_cuts/8, but adds an argument to limit the number of cuts that are generated. This can be helpful in graphs with a structure that creates very large numbers of minimal cost cutsets, the Limit argument is used to restrict the number of solutions returned.", see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(all_min_cuts_list / 5, [summary : "Curet et al, algorithm for generating all minimum-cost cuts, to be used for multiple source-sink pairs on the same graph since unnecessary repeat of initializations can be avoided", amode : all_min_cuts_list(+, +, +, +, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceSinkList" : "list source and sink nodes (integers), form SourceNode-SinkNode", "Limit" : "max number of min cuts to output (integer), if 0 then output all possible mincuts", "MinCutEdgesList" : "list where for each Source-Sink pair there is list of all minimum cost cutsets, each cutset is represented by a list of edges that separate the source-side and the sink-side of the cut)"], desc : html("This variant of the cutset generator should be used when one is interested in generating cutsets for multiple source-sink pairs in the same graph, as it avoids multiple initialisation of the data structures leading to an overall improved performance."), see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
