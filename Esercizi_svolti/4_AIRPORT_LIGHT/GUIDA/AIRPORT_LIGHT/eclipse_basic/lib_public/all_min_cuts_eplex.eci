:- module(all_min_cuts_eplex).
:- export all_min_cuts_eplex / 7.
:- export all_min_cuts_eplex / 8.
:- comment(categories, ["Algorithms"]).
:- comment(summary, "Mixed integer programming solution for generating all minimum-cost cuts").
:- comment(desc, "Mixed integer programming solution for generating all minimum-cost cuts between given source and sink nodes. This formulation was used as a comparison algorithm in the experimental section of [Norman D. Curet, Jason DeVinney, Matthew E. Gaston. An efficient network flow code for finding all minimum cost s-t cutsets. Computers & Operations Research 29 (2002) 205-219]. The idea is to iteratively solve dual max flow problem, and at each iteration, post an additional contraint to avoid repeating the same cuts.").
:- comment(author, "CrossCore Optimization Ltd").
:- comment(copyright, "2007, CrossCore Optimization Ltd").
:- comment(status, prototype).
:- comment(date, "2006-2007").
:- comment(all_min_cuts_eplex / 7, [summary : "MIP algorithm for generating all minimum-cost cuts", amode : all_min_cuts_eplex(+, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow flow (form: Flow-Edge)", "MinCuts" : "list of all minimum cost cutsets (each cutset is represented by a list of nodes belonging to the source-side of the cut)", "MinCutEdges" : "list of all minimum cost cutsets (each cutset is represented by a list of edges that separate the source-side and the sink-side of the cut)"], see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(all_min_cuts_eplex / 8, [summary : "MIP algorithm for generating all minimum-cost cuts, with a limit for max allowed number of generated cuts", amode : all_min_cuts_eplex(+, +, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "Limit" : "max number of min cuts to output (integer), if Limit = 0 then output all possible mincuts", "MaxFlowValue" : "value of the maximum flow flow (form: Flow-Edge)", "MinCuts" : "list of all minimum cost cutsets (each cutset is represented by a list of nodes belonging to the source-side of the cut)", "MinCutEdges" : "list of all minimum cost cutsets (each cutset is represented by a list of edges that separate the source-side and the sink-side of the cut)"], see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
