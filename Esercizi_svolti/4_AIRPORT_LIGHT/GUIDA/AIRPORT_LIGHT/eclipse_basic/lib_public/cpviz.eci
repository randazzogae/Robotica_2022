:- module(cpviz).
:- reexport visualize_tree.
:- tool(mylibdir / 1, mylibdir_ / 2).
:- export viz / 2.
:- export struct(tool(show, type, display, repeat, width, height, fileroot)).
:- export exec_viz / 1.
:- export viztool / 0.
:- comment(author, "Joachim Schimpf").
:- comment(status, "experimental").
:- comment(copyright, "2013, Joachim Schimpf").
:- comment(categories, ["Development Tools", "Visualisation"]).
:- comment(summary, "Wrapper library, subsuming all of CP-Viz").
:- comment(desc, html("<P>\r\n    This library loads and reexports library(visualization) and\r\n    library(visualize_tree), making all features of CP-Viz available.\r\n    In addition, it provides convenience predicates viz/2 and viztool/0\r\n    for executing CP-Viz's Java-based tools from within ECLiPSe.\r\n</P><P>\r\n    Usage examples can be found under doc/examples/cpviz/ in your ECLiPSe\r\n    installation.  The document 'CP Visualizer Format' is in the doc/\r\n    directory.  Further background documents on CP-Viz are\r\n    http://4c.ucc.ie/~hsimonis/cpviz-cp2010-paper.pdf,\r\n    http://4c.ucc.ie/~hsimonis/cpviz-cp2010-slides.pdf\r\n    and the project web site is http://sourceforge.net/projects/cpviz .\r\n</P><P>\r\n    The following is a code example.  After running sudoku(M), launch viztool\r\n    and open the file aaa.idx in the OUTPUT subdirectory.\r\n<PRE>\r\n:-lib(ic).\r\n:-import alldifferent/1 from ic_global_gac.\r\n:-lib(cpviz).\r\n\r\nsudoku(Matrix):-\r\n        problem(Matrix),\r\n        Matrix :: 1..9,\r\n        create_visualization([],Handle),\r\n        add_visualizer(Handle, domain_matrix(Matrix), [display:expanded]),\r\n        draw_visualization(Handle),\r\n        ( for(I,1,9), param(Matrix,Handle) do\r\n            alldifferent(Matrix[I,1..9]),\r\n            draw_visualization(Handle,[focus(1,row(I))]),\r\n            alldifferent(Matrix[1..9,I]),\r\n            draw_visualization(Handle,[focus(1,col(I))])\r\n        ),\r\n        ( multifor([I,J],[1,1],[7,7],[3,3]), param(Matrix,Handle) do\r\n            alldifferent(flatten(Matrix[I..I+2,J..J+2])),\r\n            draw_visualization(Handle,[focus(1,block(I,J,3,3))])\r\n        ),\r\n        extract_array(Handle,row,Matrix,NamedList),\r\n        root(Handle),\r\n        search(NamedList,1,input_order,tree_indomain(Handle,Handle), complete,[]),\r\n        solution(Handle),\r\n        close_visualization(Handle),\r\n        viz(Handle, _).\r\n        \r\nproblem([]([](4, _, 8, _, _, _, _, _, _), \r\n           [](_, _, _, 1, 7, _, _, _, _), \r\n           [](_, _, _, _, 8, _, _, 3, 2), \r\n           [](_, _, 6, _, _, 8, 2, 5, _), \r\n           [](_, 9, _, _, _, _, _, 8, _), \r\n           [](_, 3, 7, 6, _, _, 9, _, _), \r\n           [](2, 7, _, _, 5, _, _, _, _), \r\n           [](_, _, _, _, 1, 4, _, _, _), \r\n           [](_, _, _, _, _, _, 6, _, 4))).\r\n</PRE>\r\n</P>")).
:- comment(viz / 2, [summary : "Run the CP-Viz viz program to convert xml traces to graphics", amode : (viz(+, ?) is det), args : ["Handle" : "A (just closed) visualisation handle", "ToolSpecs" : "Configuration options for the output to produce"], desc : html("<P>\r\n    This predicate provides a convenient interface to CP-Viz's 'viz' program,\r\n    which converts XML trace log files into various drawing formats.  It is\r\n    meant to be invoked just after the trace files have been produced.\r\n    Afterwards, the resulting output may be viewed using viztool.\r\n</P><P>\r\n    The Handle argument should be the handle of a finished tracing session,\r\n    which must have been closed already via close_visualization/1.\r\n</P><P>\r\n    The 'viz' program needs a configuration.xml file with options.  If such\r\n    a file is present in the directory where the trace log files are located,\r\n    and you want to use it, then set ToolSpecs to [].\r\n    Otherwise, a configuration file will be created from the ToolSpecs.\r\n    ToolSpecs is a list of tool-structures with the following arguments\r\n    (all arguments except 'show' are optional):\r\n<DL>\r\n    <DT>show</DT><DD>\r\n        tree or viz\r\n</DD>\r\n    <DT>type</DT><DD>\r\n        layout (default), distribution, treemap, graph, values\r\n</DD>\r\n    <DT>display</DT><DD>\r\n        compact (default) or expanded.  This controls whether failed\r\n\tsubtrees are displayed in compact form.\r\n</DD>\r\n    <DT>repeat</DT><DD>\r\n        all, final, or a positive or negative integer\r\n</DD>\r\n    <DT>width</DT><DD>\r\n        positive integer (width of SVG canvas in pixels, default 700)\r\n</DD>\r\n    <DT>height</DT><DD>\r\n        positive integer (height of SVG canvas in pixels, default 700)\r\n</DD>\r\n</DL>\r\n    Alternatively, ToolSpecs can remain completely uninstantiated,\r\n    in which case it defaults to the following two-element list:\r\n<PRE>\r\n        [tool{show:tree},tool{show:viz}]\r\n</PRE>\r\n    For the meaning of the options refer to the CP-Viz documentation.\r\n</P><P>\r\n    After processing the log files with viz/2, you can start viztool/0 and\r\n    view the results, which are located in the directory specified by Handle\r\n    (default 'OUTPUT'). Open the aaa.idx file.\r\n</P>"), eg : "\r\n    % for using default configuration settings:\r\n    ...\r\n    close_visualization(Handle),\r\n    viz(Handle, _).\r\n\r\n    % with specific configuration settings:\r\n    ...\r\n    close_visualization(Handle),\r\n    viz(Handle, [\r\n            tool{show:tree,display:expanded},\r\n            tool{show:viz,width:1000,height:1000}\r\n        ]).\r\n", see_also : [create_visualization / 2, close_visualization / 1, viztool / 0]]).
:- comment(viztool / 0, [summary : "Launch the CP-Viz viztool for viewing trace log visualisations. In TkECLiPSe, this can be done from the Tools menu."]).
