:- module(visualize_tree).
:- export root / 1.
:- export solution / 1.
:- export try / 4.
:- export try_c / 4.
:- export failure / 4.
:- export failure_c / 4.
:- export tree_indomain / 3.
:- export tree_indomain_min / 3.
:- export tree_indomain_max / 3.
:- export tree_indomain_middle / 3.
:- export tree_indomain_random / 3.
:- export number_variables / 3.
:- export number_variables / 4.
:- export name_variables / 4.
:- export name_variables / 5.
:- export extract_array / 4.
:- export extract_array / 5.
:- reexport visualization.
:- comment(author, "Helmut Simonis").
:- comment(status, "experimental").
:- comment(copyright, "2010, Helmut Simonis").
:- comment(categories, ["Development Tools", "Visualisation"]).
:- comment(summary, "Entry point for VIZ visualisation tools").
:- comment(description, "This library is the entry point for the VIZ visualization tools. It must be loaded to allow generation of log files for the search tree and the variable/constraint visuaization.").
:- comment(extract_array / 4, [summary : "Convert a matrix into a list for search inside a visualization", args : ["Handle" : "an opaque data structure for the visualization", "RowCol" : "atom row or col, controlling the order of items in the list", "Matrix" : "a 2D matrix", "List" : "a variable, will be unified with a list of terms"], amode : extract_array(+, ++, +, -), desc : html("Extract the elements of a matrix inot a list in row or column order. The entries of the list will be terms which can be used inside a search routine with visualization."), eg : ascii("model(Matrix):-\r\n    Matrix[1..9,1..9] :: 1..9,\r\n    create_visualization([],Handle),\r\n    add_visualizer(Handle,\r\n               domain_matrix(Matrix),\r\n               []),\r\n    (for(I,1,9),\r\n     param(Matrix,Method) do\r\n        alldifferent(Matrix[I,1..9]),\r\n        alldifferent(Matrix[1..9,I])\r\n    ),\r\n    (multifor([I,J],[1,1],[7,7],[3,3]),\r\n     param(Matrix) do\r\n        alldifferent(flatten(Matrix[I..I+2,J..J+2]))\r\n    ),\r\n    extract_array(Handle,row,Matrix,NamedList),\r\n    root(Handle),\r\n    search(NamedList,1,input_order,tree_indomain(Handle,_),\r\n           complete,[]),\r\n    solution(Handle),\r\n    close_visualization(Handle).\r\n"), see_also : [extract_array / 5]]).
:- comment(extract_array / 5, [summary : "Convert a matrix into a list for search inside a visualization", args : ["Handle" : "an opaque data structure for the visualization", "RowCol" : "atom row or col, controlling the order of items in the list", "Group" : "integer, a group identifier", "Matrix" : "a 2D matrix", "List" : "a variable, will be unified with a list of terms"], amode : extract_array(+, ++, ++, +, -), desc : html("Extract the elements of a matrix inot a list in row or column order. The entries of the list will be terms which can be used inside a search routine with visualization."), eg : ascii("model(Matrix):-\r\n    Matrix[1..9,1..9] :: 1..9,\r\n    create_visualization([],Handle),\r\n    add_visualizer(Handle,\r\n               domain_matrix(Matrix),\r\n               [group:1]),\r\n    (for(I,1,9),\r\n     param(Matrix,Method) do\r\n        alldifferent(Matrix[I,1..9]),\r\n        alldifferent(Matrix[1..9,I])\r\n    ),\r\n    (multifor([I,J],[1,1],[7,7],[3,3]),\r\n     param(Matrix) do\r\n        alldifferent(flatten(Matrix[I..I+2,J..J+2]))\r\n    ),\r\n    extract_array(Handle,row,1,Matrix,NamedList),\r\n    root(Handle),\r\n    search(NamedList,1,input_order,tree_indomain(Handle,_),\r\n           complete,[]),\r\n    solution(Handle),\r\n    close_visualization(Handle).\r\n"), see_also : [extract_array / 4]]).
:- comment(failure / 4, [summary : "Create a fail node for the search tree", args : ["Handle" : "an opaque data structure for the visualization", "Name" : "atomic value, the name of the variable to be assigned", "Size" : "an integer, the size of the domain of the variable being assigned", "Value" : "an integer, the value assigned to the variable"], amode : failure(+, ++, ++, ++), desc : html("This is an interface that should only be used by experienced programmers creating their own search routines. It creates a failure node in the search tree, marking that the assignment of a value for a variable has failed. The different versions of tree_indomain/3 automatically call this predicate on failure of an assignment, so that users should only have to call it if their search routine can not be expressed with those primitives. This predicate does not call draw_visualization/1."), eg : html(""), see_also : [root / 1, solution / 1, try / 4]]).
:- comment(name_variables / 4, [summary : "Create a list of terms for a search routine, naming the variables with strings", args : ["Handle" : "an opaque data structure for the visualization", "L" : "a list of domain variables to be assigned", "Names" : "a list of strings, the names of the variables", "Terms" : "a variable, will be unified with a list of terms"], amode : name_variables(+, +, ++, -), desc : html("This predicate creates a list of terms for a search routine creating a visualization. "), eg : ascii("sendmory(L):-\r\n    L=[S,E,N,D,M,O,R,Y],\r\n    L :: 0..9,\r\n    create_visualization([],Handle),\r\n    add_visualizer(Handle,\r\n                   vector(L),\r\n                   []),\r\n    alldifferent(L),\r\n    S #\\= 0,\r\n    M #\\= 0,\r\n    1000*S+100*E+10*N+D + \r\n    1000*M+100*O+10*R+E #= \r\n    10000*M + 1000*O+100*N+10*E+Y,\r\n\r\n    name_variables(Handle,L,['S','E','N','D','M','O','R','Y'],Terms),\r\n    root(Handle),\r\n    search(Terms,1,input_order,tree_indomain(Handle,_),\r\n           complete,[]),\r\n    solution(Handle),\r\n    close_visualization(Handle)."), see_also : [number_variables / 4, name_variables / 5]]).
:- comment(name_variables / 5, [summary : "Create a list of terms for a search routine, naming the variables with strings", args : ["Handle" : "an opaque data structure for the visualization", "L" : "a list of domain variables to be assigned", "Names" : "a list of strings, the names of the variables", "Group" : "id of the group these variables belong to", "Terms" : "a variable, will be unified with a list of terms"], amode : name_variables(+, +, ++, ++, -), desc : html("This predicate creates a list of terms for a search routine creating a visualization. "), eg : ascii("sendmory(L):-\r\n    L=[S,E,N,D,M,O,R,Y],\r\n    L :: 0..9,\r\n    create_visualization([],Handle),\r\n    add_visualizer(Handle,\r\n                   vector(L),\r\n                   [group:1]),\r\n    alldifferent(L),\r\n    S #\\= 0,\r\n    M #\\= 0,\r\n    1000*S+100*E+10*N+D + \r\n    1000*M+100*O+10*R+E #= \r\n    10000*M + 1000*O+100*N+10*E+Y,\r\n\r\n    name_variables(Handle,L,['S','E','N','D','M','O','R','Y'],1,Terms),\r\n    root(Handle),\r\n    search(Terms,1,input_order,tree_indomain(Handle,_),\r\n           complete,[]),\r\n    solution(Handle),\r\n    close_visualization(Handle)."), see_also : [number_variables / 4, name_variables / 5]]).
:- comment(number_variables / 3, [summary : "Create a list of terms for a search routine, numbering the variables", args : ["Handle" : "a handle to an opaque data structure for the viualization", "L" : "a list of variables to be assigned", "Terms" : "a variable, will be unified to a list of terms"], amode : number_variables(+, +, -), desc : html("This predicate is used to number the variables before the search, so that the visualizer knows at each step which variable is currently assigned."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [number_variables / 4, name_variables / 4]]).
:- comment(number_variables / 4, [summary : "Create a list of terms for a search routine, numbering the variables", args : ["Handle" : "a handle to an opaque data structure for the viualization", "L" : "a list of variables to be assigned", "Group" : "an integer, the group identifier", "Terms" : "a variable, will be unified to a list of terms"], amode : number_variables(+, +, +, -), desc : html("This predicate is used to number the variables before the search, so that the visualizer knows at each step which variable is currently assigned."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[group:1]),\n    number_variables(Handle,1,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [number_variables / 3, name_variables / 4]]).
:- comment(root / 1, [summary : "Create the root node of a search tree", args : ["Handle" : "an opaque data structure for the visualization"], amode : root(+), desc : html("This predicate creates the root node of a search tree in a visualization, this should be called before any choices are made. It automatically calls draw_visualization/1 to collect the information about the state of variables and constraints."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [solution / 1, try / 4, failure / 4, tree_indomain / 3, draw_visualization / 1]]).
:- comment(solution / 1, [summary : "Create a solution node for a search tree", args : ["Handle" : "an opaque data structure for the visualization"], amode : solution(+), desc : html("This predicate should be calledn when a solution of the constraint problem has been found. It create a solution node in the tree log, and logs the current state of the constraint model for visualization."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, try / 4, failure / 4, tree_indomain / 3]]).
:- comment(tree_indomain / 3, [summary : "Primitive to assign a variable while creating a search tree", args : ["Term" : "A term containing the variable to be assigned", "Handle" : "an opaque data structure for the visualization", "HandleOut" : "will be unified with the Handle argument"], amode : tree_indomain(+, +, ?), desc : html("This predicate should be used instead of indomain/1 when visualizing the execution. Instead of a single variable, it expects a term which describes the name and index of the variable for logging purposes."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, solution / 1, indomain / 1, tree_indomain / 3, tree_indomain_min / 3, tree_indomain_max / 3, tree_indomain_middle / 3, tree_indomain_random / 3]]).
:- comment(tree_indomain_max / 3, [summary : "Primitive to assign a variable while creating a search tree", args : ["Term" : "A term containing the variable to be assigned", "Handle" : "an opaque data structure for the visualization", "HandleOut" : "will be unified with the Handle argument"], amode : tree_indomain_max(+, +, ?), desc : html("This predicate should be used instead of indomain/2 when visualizing the execution. Instead of a single variable, it expects a term which describes the name and index of the variable for logging purposes."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain_max(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, solution / 1, indomain / 2, tree_indomain / 3, tree_indomain_min / 3, tree_indomain_max / 3, tree_indomain_middle / 3, tree_indomain_random / 3]]).
:- comment(tree_indomain_middle / 3, [summary : "Primitive to assign a variable while creating a search tree", args : ["Term" : "A term containing the variable to be assigned", "Handle" : "an opaque data structure for the visualization", "HandleOut" : "will be unified with the Handle argument"], amode : tree_indomain_middle(+, +, ?), desc : html("This predicate should be used instead of indomain/2 when visualizing the execution. Instead of a single variable, it expects a term which describes the name and index of the variable for logging purposes."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain_middle(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, solution / 1, indomain / 2, tree_indomain / 3, tree_indomain_min / 3, tree_indomain_max / 3, tree_indomain_middle / 3, tree_indomain_random / 3]]).
:- comment(tree_indomain_min / 3, [summary : "Primitive to assign a variable while creating a search tree", args : ["Term" : "A term containing the variable to be assigned", "Handle" : "an opaque data structure for the visualization", "HandleOut" : "will be unified with the Handle argument"], amode : tree_indomain_min(+, +, ?), desc : html("This predicate should be used instead of indomain/2 when visualizing the execution. Instead of a single variable, it expects a term which describes the name and index of the variable for logging purposes."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain_min(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, solution / 1, indomain / 2, tree_indomain / 3, tree_indomain_min / 3, tree_indomain_max / 3, tree_indomain_middle / 3, tree_indomain_random / 3]]).
:- comment(tree_indomain_random / 3, [summary : "Primitive to assign a variable while creating a search tree", args : ["Term" : "A term containing the variable to be assigned", "Handle" : "an opaque data structure for the visualization", "HandleOut" : "will be unified with the Handle argument"], amode : tree_indomain_random(+, +, ?), desc : html("This predicate should be used instead of indomain/2 when visualizing the execution. Instead of a single variable, it expects a term which describes the name and index of the variable for logging purposes."), eg : ascii("top(N,L):-\n    length(L,N),\n    L :: 1..N,\n    alldifferent(L),\n    create_visualization([],Handle),\n    add_visualizer(Handle,vector(L),[]),\n    number_variables(Handle,L,Terms),\n    root(Handle),\n    search(Terms,1,first_fail,\n           tree_indomain_random(Handle,_),complete,[]),\n    solution(Handle),\n    close_visualization(Handle).\n"), see_also : [root / 1, solution / 1, indomain / 2, tree_indomain / 3, tree_indomain_min / 3, tree_indomain_max / 3, tree_indomain_middle / 3, tree_indomain_random / 3]]).
:- comment(try / 4, [summary : "Create a try node for the search tree", args : ["Handle" : "an opaque data structure for the visualization", "Name" : "atomic value, the name of the variable to be assigned", "Size" : "an integer, the size of the domain of the variable being assigned", "Value" : "an integer, the value assigned to the variable"], amode : try(+, ++, ++, ++), desc : html("This is an interface that should only be used by experienced programmers creating their own search routines. It creates a try node in the search tree, marking that the assignment of a value for a variable has succeeded. The different versions of tree_indomain/3 automatically call this predicate, so that users should only have to call it if their search routine can not be expressed with those primitives. This predicate does not call draw_visualization/1."), eg : html(""), see_also : [root / 1, solution / 1, failure / 4]]).
