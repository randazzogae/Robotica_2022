:- module(max_flow_eplex).
:- export max_flow_eplex / 5.
:- export max_flow_eplex_dual / 5.
:- export max_flow_eplex_dual / 7.
:- comment(categories, ["Algorithms"]).
:- comment(summary, "Linear programming solution for maximum flow problem").
:- comment(author, "CrossCore Optimization Ltd").
:- comment(copyright, "2007, CrossCore Optimization Ltd").
:- comment(status, prototype).
:- comment(date, "2006-2007").
:- comment(max_flow_eplex / 5, [summary : "Linear programming solution for maximum flow problem", amode : max_flow_eplex(+, +, +, +, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow"], see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(max_flow_eplex_dual / 5, [summary : "Linear programming solution for maximum flow problem, dual linear program", amode : max_flow_eplex_dual(+, +, +, +, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow"], see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
:- comment(max_flow_eplex_dual / 7, [summary : "Linear programming solution for maximum flow problem, dual linear program. Outputs the cut as nodes and edges.", amode : max_flow_eplex_dual(+, +, +, +, -, -, -), args : ["Graph" : "a graph structure, no parallel edges, e(Src,Dest,EdgeData)", "CapacityArg" : "which argument of EdgeData to use as edge capacity (integer), (0 if EdgeData is a single number and -1 if every edge capacity is 1)", "SourceNode" : "source node number (integer)", "SinkNode" : "sink node number (integer)", "MaxFlowValue" : "value of the maximum flow", "MinCutNodes" : "List of nodes that belong to the source side of the minimum cost cut", "MinCutEdges" : "List of edges of the minimum cost cut"], see_also : [max_flow : max_flow / 5, max_flow : max_flow / 7, max_flow_eplex : max_flow_eplex / 5, max_flow_eplex : max_flow_eplex_dual / 5, max_flow_eplex : max_flow_eplex_dual / 7, all_min_cuts : all_min_cuts / 8, all_min_cuts : all_min_cuts / 9, all_min_cuts : all_min_cuts_list / 5, all_min_cuts_eplex : all_min_cuts_eplex / 7, all_min_cuts_eplex : all_min_cuts_eplex / 8]]).
