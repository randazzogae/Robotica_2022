:- module(graphviz).
:- export view_graph / 1.
:- tool(view_graph / 1, view_graph_ / 2).
:- export view_graph / 2.
:- tool(view_graph / 2, view_graph_ / 3).
:- export view_graph / 3.
:- tool(view_graph / 3, view_graph_ / 4).
:- export write_graph / 2.
:- tool(write_graph / 2, write_graph_ / 3).
:- export write_graph / 3.
:- tool(write_graph / 3, write_graph_ / 4).
:- export write_graph / 4.
:- tool(write_graph / 4, write_graph_ / 5).
:- comment(categories, ["Interfacing", "Visualisation"]).
:- comment(summary, "Interface to Graphviz Graph Drawing Programs from AT&T").
:- comment(author, "Andrew J Sadler and Joachim Schimpf, IC-Parc").
:- comment(date, "$Id: graphviz.ecl,v 1.5 2016/07/24 19:34:45 jschimpf Exp $").
:- comment(desc, html("\n    This library provides an interface to the Graphviz Graph Drawing Programs\n    from AT&T (<A HREF=\"http://www.graphviz.org\">www.graphviz.org</A>).\n<P>\n    Graphviz itself must be downloaded and installed separately.  It is\n    readily available for most operating systems, and subject to the\n    open-source <A HREF=\"http://www.graphviz.org/License.php\">Eclipse Public Licence</A>.\n<P>\n    The predicates in this library take graph data structures as defined by\n    library(graph_algorithms), invoke graphviz's layout tools, and output\n    the generated drawing in various file formats (which can then be viewed\n    in a browser of dedicated viewer), or invoke a simple viewer directly.\n    ")).
:- comment(view_graph / 1, [summary : "Display a given graph in a window (using default options)", amode : view_graph(+), args : ["Graph" : "A graph structure"], see_also : [view_graph / 2, library(graph_algorithms)], eg : "\n    ?- lib(graph_algorithms), lib(graphviz).\n    Yes (1.17s cpu)\n\n    ?- make_random_graph(10,30,true,true,true,G), view_graph(G).\n    G = graph(...)\n    Yes (0.03s cpu)\n    "]).
:- comment(view_graph / 2, [summary : "Display a given graph in a window", amode : view_graph(+, +), args : ["Graph" : "A graph structure", "Options" : "A list of Option:Value pairs"], see_also : [view_graph / 1, library(graph_algorithms)], desc : html("\n    This predicate takes a graph, applies one of the graphviz layout routines\n    to it, and displays the result in a viewer window.\n    <P>\n    The viewer is an application called grappa, which requires Java.\n    <P>\n    Possible options are:\n    <DL>\n    <DT>graph_attrs</DT>\n\t<DD>a list of Name=Value pairs which specify the graph attributes</DD>\n    <DT>default_edge_attrs</DT>\n\t<DD>a list of Name=Value pairs which specify the default edge attributes</DD>\n    <DT>default_node_attrs</DT>\n\t<DD>a list of Name=Value pairs which specify the default node attributes</DD>\n    <DT>node_attrs_generator</DT>\n\t<DD>a partialpredicate specification pred(ExtraArgs,...) that\n\twill generate node attributes for specific nodes. This\n\tpredicate will be invoked for every node in the graph with the\n\targuments pred(ExtraArgs,...,+Graph, +Node, -AttrList). It is\n\texpected to compute an attribute list for a particular\n\tnode. If it fails, the node will be displayed using the\n\tdefault node attributes.</DD>\n\n    <DT>edge_attrs_generator</DT>\n\t<DD>a partialpredicate specification pred(ExtraArgs,...) that\n\twill generate edge attributes for specific edges. This\n\tpredicate will be invoked for every edge in the graph with the\n\targuments pred(ExtraArgs,...,+Graph, +Edge, -AttrList). It is\n\texpected to compute an attribute list for a particular\n\tedge. If it fails, the edge will be displayed using the\n\tdefault edge attributes.</DD>\n    <DT>layout</DT>\n\t<DD>One of the atoms: none, dot, neato, twopi, force_directed, radial,\n\ttree, top_to_bottom, left_to_right.\n\tAlternatively, a list specifying a layout command (see exec/3).\n    </DL>\n    For the exact definition of graph, node and edge attributes, see the\n    specification of the DOT language in the graphviz documentation.\n    "), eg : "\n    ?- lib(graph_algorithms), lib(graphviz).\n    Yes (1.17s cpu)\n\n    ?- make_random_graph(10, 30, true, true, true, G),\n       view_graph(G, [layout:left_to_right]).\n    G = graph(...)\n    Yes (0.03s cpu)\n\n    ?- make_random_graph(10, 30, true, true, true, G),\n       view_graph(G, [layout:left_to_right]).\n    G = graph(...)\n    Yes (0.03s cpu)\n\n\n% Sample node attribute generator\n\nnode_colour(Graph, Node, Attrs) :-\n\t( Node mod 2 =:= 0 -> Attrs = [color=red] ; Attrs = [color=green] ).\n\n% Sample run\n\n    ?- make_random_graph(10, 30, true, true, true, G),\n       view_graph(G, [node_attrs_generator:node_colour]).\n    G = graph(...)\n    Yes (0.03s cpu)\n    "]).
:- comment(view_graph / 3, [summary : "Display a given graph in an existing window", amode : view_graph(+, +, ?), args : ["Graph" : "A graph structure", "Options" : "A list of Option:Value pairs", "HandleFile" : "String or variable"], see_also : [view_graph / 1, view_graph / 2, library(graph_algorithms)], desc : html("\n    This predicate takes a graph, applies one of the graphviz layout\n    routines to it, and displays the result in a viewer window.  If\n    the HandleFile option is a variable it will be bound the name of\n    the file which the viewer is rendering.  By calling this predicate\n    again with the same file name, the viewer will re-load the file\n    WITHOUT creating a new window.<P>\n\n    This predicate can be very useful for displaying graph structures\n    which change over time.<P>\n\n    NOTE: This predicate will sleep for one second to give the viewer\n    a chance to notice that the file has changed and to re-read it.\n\n    <P>\n    ")]).
:- comment(write_graph / 2, [summary : "Write a picture of a graph as a postscript file", amode : write_graph(+, +), args : ["Graph" : "A graph structure", "File" : "A file name"], see_also : [write_graph / 3, write_graph / 4, view_graph / 2, library(graph_algorithms)], eg : "\n    ?- lib(graph_algorithms), lib(graphviz).\n    Yes (1.17s cpu)\n\n    % will create a file mygraph.ps\n    ?- make_random_graph(10,30,true,true,true,G),\n       write_graph(G, \"mygraph\").\n    G = graph(...)\n    Yes (0.03s cpu)\n    "]).
:- comment(write_graph / 3, [summary : "Write a picture of a graph as a file of a given format", amode : write_graph(+, +, +), args : ["Graph" : "A graph structure", "File" : "A file name", "Format" : "An atom (dot,gv,eps,gif,jpg,pdf,png,svg,...)"], see_also : [write_graph / 2, write_graph / 4, view_graph / 2, library(graph_algorithms)], desc : html("\n    This predicate takes a graph, applies one of the graphviz layout routines\n    to it, and writes the result to a file is a given format.\n    <P>\n    Some possible formats are:\n    <DL>\n    <DT>dot,gv,xdot</DT><DD>\n        Graphviz own formats</DD>\n    <DT>eps</DT><DD>\n        Encapsulated Postscript</DD>\n    <DT>gif</DT><DD>\n        GIF bitmaps</DD>\n    <DT>jpg</DT><DD>\n        JPEG compressed images</DD>\n    <DT>pdf</DT><DD>\n        PDF Portable Document Format</DD>\n    <DT>plain</DT><DD>\n        A human-readable representation</DD>\n    <DT>png</DT><DD>\n\tPNG (Portable Network Graphics)</DD>\n    <DT>svg</DT><DD>\n\tSVG Scalable Vector Graphics</DD>\n    </DL>\n    Many of these formats can be displayed by web browsers or by dedicated\n    viewers.  See the graphviz documentation for details and additional formats.\n    "), eg : "\n    ?- lib(graph_algorithms), lib(graphviz).\n    Yes (1.17s cpu)\n\n    ?- make_random_graph(10,30,true,true,true,G),\n       write_graph(G, \"mygraph\", png).\n    G = graph(...)\n    Yes (0.03s cpu)\n\n    ?- make_random_graph(10,30,true,true,true,G),\n       write_graph(G, \"mygraph\", dot).\n    G = graph(...)\n    Yes (0.03s cpu)\n    "]).
:- comment(write_graph / 4, [summary : "Write a picture of a graph as a file of a given format", amode : write_graph(+, +, +, +), args : ["Graph" : "A graph structure", "File" : "A file name", "Format" : "An atom (dot,gv,eps,gif,jpg,pdf,png,svg,...)", "Options" : "A list of Option:Value pairs"], see_also : [write_graph / 2, write_graph / 3, view_graph / 2, library(graph_algorithms)], desc : html("\n    This predicate takes a graph, applies one of the graphviz layout routines\n    to it, and writes the result to a file is a given format.\n    <P>\n    Possible options are as specified in view_graph/2.\n    <P>\n    Some possible formats are:\n    <DL>\n    <DT>dot,gv,xdot</DT><DD>\n        Graphviz own formats</DD>\n    <DT>eps</DT><DD>\n        Encapsulated Postscript</DD>\n    <DT>gif</DT><DD>\n        GIF bitmaps</DD>\n    <DT>jpg</DT><DD>\n        JPEG compressed images</DD>\n    <DT>pdf</DT><DD>\n        PDF Portable Document Format</DD>\n    <DT>plain</DT><DD>\n        A human-readable representation</DD>\n    <DT>png</DT><DD>\n\tPNG (Portable Network Graphics)</DD>\n    <DT>svg</DT><DD>\n\tSVG Scalable Vector Graphics</DD>\n    </DL>\n    Many of these formats can be displayed by web browsers or by dedicated\n    viewers.  See the graphviz documentation for details and additional formats.\n    "), eg : "\n    ?- lib(graph_algorithms), lib(graphviz).\n    Yes (1.17s cpu)\n\n    ?- make_random_graph(10,30,true,true,true,G),\n       write_graph(G, \"mygraph\", png).\n    G = graph(...)\n    Yes (0.03s cpu)\n\n    ?- make_random_graph(10,30,true,true,true,G),\n       write_graph(G, \"mygraph\", dot).\n    G = graph(...)\n    Yes (0.03s cpu)\n    "]).
