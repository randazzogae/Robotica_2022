:- module(atts).
:- export op(1150, fx, [attribute]).
:- export attribute / 1.
:- export atts_subset / 3.
:- export get_atts / 2.
:- export map_atts / 2.
:- export put_atts / 2.
:- reexport get_attributes / 4, replace_attribute / 3 from sepia_kernel.
:- tool(attribute / 1, attribute_body / 2).
:- tool(get_atts / 2, get_atts_body / 3).
:- tool(map_atts / 2, map_atts_body / 3).
:- tool(put_atts / 2, put_atts_body / 3).
:- export atts_handlers_init / 0.
:- tool(atts_handlers_init / 0, atts_handlers_init_ / 1).
:- comment(categories, ["Compatibility"]).
:- comment(summary, "Variable attributes compatible with SICStus Prolog").
:- comment(copyright, "Cisco Systems, Inc").
:- comment(author, "Micha Meier, ECRC Munich").
:- comment(date, "$Date: 2016/07/24 19:34:44 $").
:- comment(desc, html("<P>\n    Implements SICStus-Prolog compatible attributes on variables, via\n    mapping to native ECLiPSe attributes (one ECLiPSe attribute for\n    each module that defines SICStus attributes).\n</P><P>\n    Implements the predicates\n<DL>\n    <DT>get_atts(-Var, ?AccessSpec)</DT>\n\t<DD>getting attributes</DD>\n    <DT>put_atts(-Var, +AccessSpec)</DT>\n\t<DD>setting attributes</DD>\n</DL>\n    and allows the user definition of the hook predicates\n<DL>\n    <DT>verify_attributes(-Var, +Value, -Goals)</DT>\n\t<DD>pre-unification hook, called as ECLiPSe's pre_unify handler</DD>\n    <DT>attribute_goal(-Var, -Goal)</DT>\n\t<DD>allows to define an interpretation of the attribute as goal.\n\tIf defined, it is also used as the print-handler for attributes.</DD>\n</DL>\n    ECLiPSe's toplevel makes no attempts to invoke any hooks.\n</P>\n")).
