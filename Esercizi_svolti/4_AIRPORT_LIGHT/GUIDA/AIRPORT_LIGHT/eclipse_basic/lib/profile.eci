:- module(profile).
:- export profile / 1.
:- export profile / 2.
:- tool(profile / 1, profile_body / 2).
:- tool(profile / 2, profile_body / 3).
:- comment(categories, ["Development Tools"]).
:- comment(summary, "Profiling package for ECLiPSe programs").
:- comment(author, "Micha Meier and Stefano Novello, ECRC Munich").
:- comment(copyright, "Cisco Systems, Inc").
:- comment(date, "$Date: 2017/08/19 12:53:36 $").
:- comment(profile / 1, [amode : (profile(+) is det), args : ["Goal" : "Callable term"], summary : "Execute Goal (once) and print the time spent in each predicate.", see_also : [get_flag / 2, profile / 2], desc : html("<P>   This predicate invokes the profiler with default options.  Equivalent to:\n   <PRE>\n       profile(Goal, []).\n   </PRE>\n   See profile/2 for details.\n<P>\n    ECLiPSe must have been started with the -P command line option\n    (or equivalent) in order to support profiling.\n</P>\n"), eg : "\n?- profile(length(_,100000000)).\n\n\t\t  PROFILING STATISTICS\n\t\t  --------------------\nGoal:\t\t  length(_80, 100000000)\nResult:\t\t  success\nSampling rate:\t  every 0.01s process_cputime\nSamples taken:\t  182\nThread cputime:\t  1.82s\n\nPredicate\t      Module\t    %Time    Time   %Cum\n---------------------------------------------------------\nlength            /2  sepia_kernel  79.7%    1.45s  79.7%\ngarbage_collect   /0  sepia_kernel  20.3%    0.37s 100.0%\n\nYes (1.86s cpu)\n"]).
:- comment(profile / 2, [amode : (profile(+, ++) is det), args : ["Goal" : "Callable term", "Options" : "List of options"], summary : "Execute Goal (once) and print the time spent in each predicate.", see_also : [get_flag / 2, profile / 1], desc : html("<P>\n    Runs the given goal with the sampling profiler, which collects\n    information about the currently executing predicate 100 times\n    per second.  After the goal finishes, a result table is printed.\n<P>\n    ECLiPSe must have been started with the -P command line option\n    (or equivalent) in order to support profiling.  It is, however, not\n    necessary to compile the profiled code in a particular way; the profiler\n    works independently of compiler optimizations and debug mode.\n<P>\n    Possible options:\n    <DL>\n    <DT><STRONG>keep_file</STRONG></DT><DD>\n\tdon't destroy the samples file &lt;tmp_dir&gt;/eclipse.prof.&lt;pid&gt;\n\tthat is used to collect profiling information during execution.\n\tWithout this option, the file is automatically deleted.\n    </DL>\n<P>\n    Notes:\n    <UL>\n    <LI>Garbage collection time is shown as predicate garbage_collect/0,\n    even when garbage collection was automatically triggered.</LI>\n    <LI>The time spent in simple predicates (i.e. those with call_type\n    external, written in C) is counted towards their parent predicate.</LI>\n    <LI>In cases where the predicate name is not available, e.g. local goals in\n    a locked module, the information is grouped under a blank predicate\n    name entry for the module.</LI>\n    </UL>\n    "), eg : "\n?- profile(length(_,100000000), []).\n\n\t\t  PROFILING STATISTICS\n\t\t  --------------------\nGoal:\t\t  length(_80, 100000000)\nResult:\t\t  success\nSampling rate:\t  every 0.01s process_cputime\nSamples taken:\t  182\nThread cputime:\t  1.82s\n\nPredicate\t      Module\t    %Time    Time   %Cum\n---------------------------------------------------------\nlength            /2  sepia_kernel  79.7%    1.45s  79.7%\ngarbage_collect   /0  sepia_kernel  20.3%    0.37s 100.0%\n\nYes (1.86s cpu)\n"]).
